# **Reliable GitHub Pages Workflow for Next.js (Static Export)**
**A fully verifiable local-and-remote GitHub Pages workflow**


---


## **1. Keep the Repository Structure Simple**
 **One Repository, One Main Branch**  
  - Place **all source code** (Next.js, Tailwind, etc.) in the `main` branch.  
  - Include a **`.gitignore`** that ignores only:
    - `.next/` (Next.js build directory)
    - `node_modules/`
    - **Do not** ignore `out/` if you plan to commit static builds (though CI usually handles this).  
  - Keep the **CNAME** file in the root (if using a custom domain).  


 **No Separate `gh-pages` Branch (Unless Absolutely Required)**  
  - Keep code and builds on `main`.  
  - **Use GitHub Actions to build & deploy** automatically to GitHub Pages.  
  - Avoid manual merging or branch juggling for compiled files.  


---


## **2. Local Development & Verification**
 **Install All Dependencies**  
  ```sh
  npm install
  ```


 **Run Local Dev Server**  
  ```sh
  npm run dev
  ```
  - Open `http://localhost:3000` and verify styles, images, and navigation.  


 **Static Export & Local Testing**  
  ```sh
  npm run build
  ```
  - Next.js (with `output: 'export'`) automatically generates static files in `out/`.  


  ```sh
  npx serve out
  ```
  - Open `http://localhost:5000` (or the printed URL) to verify **exactly** how GitHub Pages will serve the site.  
  - **Confirm:** No missing paths, 404s, or broken assets.  


---


## **3. GitHub Pages Deployment (Automated)**
 **Ensure the `CNAME` File**  
  - If using a custom domain (`journaltrove.com`), ensure a `CNAME` file is present in the repository root.  


 **GitHub Actions Workflow (Next.js Static Export)**  
  - **Do not manually commit `out/`**—GitHub Actions will handle it.  
  - A typical **GitHub Actions workflow** for this setup:
    ```yaml
    name: Deploy to GitHub Pages


    on:
      push:
        branches: [ main ]


    permissions:
      contents: read
      pages: write
      id-token: write


    jobs:
      build:
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
          - uses: actions/setup-node@v4
            with:
              node-version: 20
          - name: Install
            run: npm ci
          - name: Build
            run: npm run build  # produces out/ directory
          - name: Upload artifact
            uses: actions/upload-pages-artifact@v3
            with:
              path: ./out
      deploy:
        needs: build
        runs-on: ubuntu-latest
        steps:
          - name: Deploy
            uses: actions/deploy-pages@v4
    ```


 **Token Scopes**  
  - The Personal Access Token (PAT) or `GITHUB_TOKEN` **already has** the `workflow` permission, which is what you need to update the workflow.  
  - If GitHub Actions refuses to deploy, **check token permissions**.


---


## **4. Consistency Between Local & Remote**
 **Local = Production**  
  - **ALWAYS** test the local build (`npx serve out`) before pushing.  
  - **What works locally should be exactly what GitHub Pages serves.**  


 **Tailwind / CSS / Images**  
  - Ensure `postcss.config.js` and `tailwind.config.js` are correct.  
  - **Check paths:**  
    - Use **relative paths** for assets (`./_next/...` works fine).  
    - **Avoid unnecessary basePath or assetPrefix changes unless needed**.  


 **One-Step Deployment**  
  - Only push source files to `main`.  
  - Let GitHub Actions handle the **entire build & deployment process**.


---


## **5. What You Should Tell the Assistant Every Time**
 **“We Are in the `journaltrove.com` Directory”**  
  - Ensure all commands and file edits happen within **this directory**—not the workspace root.  


 **“Next.js Static Export Puts Our Final Build in `out/`”**  
  - **DO NOT push `out/` manually**—the GitHub Action handles it.  
  - If manually committing `out/`, remove it from `.gitignore` first.  


 **“Our Token has `workflow` Scope needed for Updating Workflow Files” and github actions**  
  - If GitHub refuses workflow updates, **check your syntax or commands**, the token is fine, are you using it?.  


 **“We’re Checking Output Locally with `serve out` Before Pushing”**  
  - **What we see locally is what GitHub Pages will serve.**  


 **“CNAME / Custom Domain Already Configured”**  
  - **The assistant should not override or break the `CNAME` file**.  
  - Ensure DNS is correctly pointing to GitHub.  


---


## **6. Final Verification Before Pushing**
Before pushing anything, **confirm that everything is in sync**:


 **Check Git Status (No Uncommitted Changes)**  
  ```sh
  git status
  ```
  - Should return: **“nothing to commit, working tree clean”**.  


 **Check Remote Sync**  
  ```sh
  git fetch && git status
  ```
  - Should return: **“Your branch is up to date with ‘origin/main’”**.  


 **Check Last Commit Matches Remote**  
  ```sh
  git log -1
  ```
  - The last commit **must match** what’s on GitHub.  


 **Check Remote URL**  
  ```sh
  git remote -v
  ```
  - Ensure GitHub remote URL is correct.  


---


## **7. Final Takeaway**
 **Main branch** holds all source code (Next.js, Tailwind, etc.).  
 **GitHub Actions automatically builds & deploys** to GitHub Pages—no manual merges.  
 **Always test the `out/` directory locally** to ensure consistency with production.  
 **If updating workflow files, ensure your PAT includes `workflow` scope.**  
 **GitHub Actions should do all the work—keep the process as simple as possible.**  


By following these steps, you **maintain 100% consistency** between local development and the live site at **https://journaltrove.com**.  


---




Always be aware of the entire project structure, lest you create files in the wrong places, or that already exist!


Check in often and make sure that you are following the instructions.